
AVRASM ver. 2.2.8  D:\EMBLABS\Lab4\Lab4\main.asm Tue Apr 27 20:57:19 2021

[builtin](2): Including file 'D:/MicroChipStu\7.0\Packs\atmel\ATmega_DFP\1.6.364\avrasm\inc\m328Pdef.inc'
D:\EMBLABS\Lab4\Lab4\main.asm(8): Including file 'D:/MicroChipStu\7.0\Packs\atmel\ATmega_DFP\1.6.364\avrasm\inc\m328Pdef.inc'
[builtin](2): Including file 'D:/MicroChipStu\7.0\Packs\atmel\ATmega_DFP\1.6.364\avrasm\inc\m328Pdef.inc'
D:\EMBLABS\Lab4\Lab4\main.asm(8): Including file 'D:/MicroChipStu\7.0\Packs\atmel\ATmega_DFP\1.6.364\avrasm\inc\m328Pdef.inc'
                                 
                                 ;
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega328P.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m328Pdef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega328P
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega328P
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M328PDEF_INC_
                                 #define _M328PDEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega328P
                                 #pragma AVRPART ADMIN PART_NAME ATmega328P
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x95
                                 .equ	SIGNATURE_002	= 0x0f
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                                 .equ	PRR	= 0x64	; MEMORY MAPPED
                                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	SPMCSR	= 0x37
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUSR	= 0x34
                                 .equ	SMCR	= 0x33
                                 .equ	ACSR	= 0x30
                                 .equ	SPDR	= 0x2e
                                 .equ	SPSR	= 0x2d
                                 .equ	SPCR	= 0x2c
                                 .equ	GPIOR2	= 0x2b
                                 .equ	GPIOR1	= 0x2a
                                 .equ	OCR0B	= 0x28
                                 .equ	OCR0A	= 0x27
                                 .equ	TCNT0	= 0x26
                                 .equ	TCCR0B	= 0x25
                                 .equ	TCCR0A	= 0x24
                                 .equ	GTCCR	= 0x23
                                 .equ	EEARH	= 0x22
                                 .equ	EEARL	= 0x21
                                 .equ	EEDR	= 0x20
                                 .equ	EECR	= 0x1f
                                 .equ	GPIOR0	= 0x1e
                                 .equ	EIMSK	= 0x1d
                                 .equ	EIFR	= 0x1c
                                 .equ	PCIFR	= 0x1b
                                 .equ	TIFR2	= 0x17
                                 .equ	TIFR1	= 0x16
                                 .equ	TIFR0	= 0x15
                                 .equ	PORTD	= 0x0b
                                 .equ	DDRD	= 0x0a
                                 .equ	PIND	= 0x09
                                 .equ	PORTC	= 0x08
                                 .equ	DDRC	= 0x07
                                 .equ	PINC	= 0x06
                                 .equ	PORTB	= 0x05
                                 .equ	DDRB	= 0x04
                                 .equ	PINB	= 0x03
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCPHA0	= UCSZ00	; For compatibility
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	UDORD0	= UCSZ01	; For compatibility
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL00	= 6	; USART Mode Select
                                 .equ	UMSEL0	= UMSEL00	; For compatibility
                                 .equ	UMSEL01	= 7	; USART Mode Select
                                 .equ	UMSEL1	= UMSEL01	; For compatibility
                                 
                                 ; UBRR0H - USART Baud Rate Register High Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWAMR - TWI (Slave) Address Mask Register
                                 .equ	TWAM0	= 1	; 
                                 .equ	TWAMR0	= TWAM0	; For compatibility
                                 .equ	TWAM1	= 2	; 
                                 .equ	TWAMR1	= TWAM1	; For compatibility
                                 .equ	TWAM2	= 3	; 
                                 .equ	TWAMR2	= TWAM2	; For compatibility
                                 .equ	TWAM3	= 4	; 
                                 .equ	TWAMR3	= TWAM3	; For compatibility
                                 .equ	TWAM4	= 5	; 
                                 .equ	TWAMR4	= TWAM4	; For compatibility
                                 .equ	TWAM5	= 6	; 
                                 .equ	TWAMR5	= TWAM5	; For compatibility
                                 .equ	TWAM6	= 7	; 
                                 .equ	TWAMR6	= TWAM6	; For compatibility
                                 
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK1 - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	OCIE1B	= 2	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Comparet Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter1 Control Register C
                                 .equ	FOC1B	= 6	; 
                                 .equ	FOC1A	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	TOIE2A	= TOIE2	; For compatibility
                                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                                 
                                 ; TCCR2A - Timer/Counter2 Control Register A
                                 .equ	WGM20	= 0	; Waveform Genration Mode
                                 .equ	WGM21	= 1	; Waveform Genration Mode
                                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                                 
                                 ; TCCR2B - Timer/Counter2 Control Register B
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM22	= 3	; Waveform Generation Mode
                                 .equ	FOC2B	= 6	; Force Output Compare B
                                 .equ	FOC2A	= 7	; Force Output Compare A
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2A - Timer/Counter2 Output Compare Register A
                                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; OCR2B - Timer/Counter2 Output Compare Register B
                                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                                 .equ	EXCLK	= 6	; Enable External Clock Input
                                 
                                 ; GTCCR - General Timer Counter Control register
                                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PSR2	= PSRASY	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register A
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCSRB - The ADC Control and Status register B
                                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                                 .equ	ACME	= 6	; 
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; DIDR0 - Digital Input Disable Register
                                 .equ	ADC0D	= 0	; 
                                 .equ	ADC1D	= 1	; 
                                 .equ	ADC2D	= 2	; 
                                 .equ	ADC3D	= 3	; 
                                 .equ	ADC4D	= 4	; 
                                 .equ	ADC5D	= 5	; 
                                 
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 ; DIDR1 - Digital Input Disable Register 1
                                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; TCCR0A - Timer/Counter  Control Register A
                                 .equ	WGM00	= 0	; Waveform Generation Mode
                                 .equ	WGM01	= 1	; Waveform Generation Mode
                                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0	; Clock Select
                                 .equ	CS01	= 1	; Clock Select
                                 .equ	CS02	= 2	; Clock Select
                                 .equ	WGM02	= 3	; 
                                 .equ	FOC0B	= 6	; Force Output Compare B
                                 .equ	FOC0A	= 7	; Force Output Compare A
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A_0	= 0	; 
                                 .equ	OCR0A_1	= 1	; 
                                 .equ	OCR0A_2	= 2	; 
                                 .equ	OCR0A_3	= 3	; 
                                 .equ	OCR0A_4	= 4	; 
                                 .equ	OCR0A_5	= 5	; 
                                 .equ	OCR0A_6	= 6	; 
                                 .equ	OCR0A_7	= 7	; 
                                 
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0B_0	= 0	; 
                                 .equ	OCR0B_1	= 1	; 
                                 .equ	OCR0B_2	= 2	; 
                                 .equ	OCR0B_3	= 3	; 
                                 .equ	OCR0B_4	= 4	; 
                                 .equ	OCR0B_5	= 5	; 
                                 .equ	OCR0B_6	= 6	; 
                                 .equ	OCR0B_7	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 ;.equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PSR10	= PSRSYNC	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register
                                 .equ	ISC00	= 0	; External Interrupt Sense Control 0 Bit 0
                                 .equ	ISC01	= 1	; External Interrupt Sense Control 0 Bit 1
                                 .equ	ISC10	= 2	; External Interrupt Sense Control 1 Bit 0
                                 .equ	ISC11	= 3	; External Interrupt Sense Control 1 Bit 1
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 
                                 ; PCICR - Pin Change Interrupt Control Register
                                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                                 
                                 ; PCMSK2 - Pin Change Mask Register 2
                                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                                 
                                 ; PCMSK1 - Pin Change Mask Register 1
                                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                                 
                                 ; PCIFR - Pin Change Interrupt Flag Register
                                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; CLKPR - Clock Prescale Register
                                 .equ	CLKPS0	= 0	; Clock Prescaler Select Bit 0
                                 .equ	CLKPS1	= 1	; Clock Prescaler Select Bit 1
                                 .equ	CLKPS2	= 2	; Clock Prescaler Select Bit 2
                                 .equ	CLKPS3	= 3	; Clock Prescaler Select Bit 3
                                 .equ	CLKPCE	= 7	; Clock Prescaler Change Enable
                                 
                                 ; SPMCSR - Store Program Memory Control and Status Register
                                 .equ    SELFPRGEN = 0; Added for backwards compatibility
                                 .equ	SPMEN	= 0	; Store Program Memory
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read-While-Write section read enable
                                 .equ    SIGRD   = 5 ; Signature Row Read
                                 .equ	RWWSB	= 6	; Read-While-Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; 
                                 .equ	IVSEL	= 1	; 
                                 .equ	PUD	= 4	; 
                                 .equ	BODSE	= 5	; BOD Sleep Enable
                                 .equ	BODS	= 6	; BOD Sleep
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	EXTREF	= EXTRF	; For compatibility
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 
                                 ; SMCR - Sleep Mode Control Register
                                 .equ	SE	= 0	; Sleep Enable
                                 .equ	SM0	= 1	; Sleep Mode Select Bit 0
                                 .equ	SM1	= 2	; Sleep Mode Select Bit 1
                                 .equ	SM2	= 3	; Sleep Mode Select Bit 2
                                 
                                 ; GPIOR2 - General Purpose I/O Register 2
                                 .equ	GPIOR20	= 0	; 
                                 .equ	GPIOR21	= 1	; 
                                 .equ	GPIOR22	= 2	; 
                                 .equ	GPIOR23	= 3	; 
                                 .equ	GPIOR24	= 4	; 
                                 .equ	GPIOR25	= 5	; 
                                 .equ	GPIOR26	= 6	; 
                                 .equ	GPIOR27	= 7	; 
                                 
                                 ; GPIOR1 - General Purpose I/O Register 1
                                 .equ	GPIOR10	= 0	; 
                                 .equ	GPIOR11	= 1	; 
                                 .equ	GPIOR12	= 2	; 
                                 .equ	GPIOR13	= 3	; 
                                 .equ	GPIOR14	= 4	; 
                                 .equ	GPIOR15	= 5	; 
                                 .equ	GPIOR16	= 6	; 
                                 .equ	GPIOR17	= 7	; 
                                 
                                 ; GPIOR0 - General Purpose I/O Register 0
                                 .equ	GPIOR00	= 0	; 
                                 .equ	GPIOR01	= 1	; 
                                 .equ	GPIOR02	= 2	; 
                                 .equ	GPIOR03	= 3	; 
                                 .equ	GPIOR04	= 4	; 
                                 .equ	GPIOR05	= 5	; 
                                 .equ	GPIOR06	= 6	; 
                                 .equ	GPIOR07	= 7	; 
                                 
                                 ; PRR - Power Reduction Register
                                 .equ	PRADC	= 0	; Power Reduction ADC
                                 .equ	PRUSART0	= 1	; Power Reduction USART
                                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                                 .equ	PRTWI	= 7	; Power Reduction TWI
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEARL - EEPROM Address Register Low Byte
                                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                                 
                                 ; EEARH - EEPROM Address Register High Byte
                                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEPE	= 1	; EEPROM Write Enable
                                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	CKOUT	= 6	; Clock output
                                 .equ	CKDIV8	= 7	; Divide clock by 8
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select reset vector
                                 .equ	BOOTSZ0	= 1	; Select boot size
                                 .equ	BOOTSZ1	= 2	; Select boot size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	WDTON	= 4	; Watchdog Timer Always On
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	DWEN	= 6	; debugWIRE Enable
                                 .equ	RSTDISBL	= 7	; External reset disable
                                 
                                 ; EXTENDED fuse bits
                                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x3fff	; Note: Word address
                                 .equ	IOEND	= 0x00ff
                                 .equ	SRAM_START	= 0x0100
                                 .equ	SRAM_SIZE	= 2048
                                 .equ	RAMEND	= 0x08ff
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x03ff
                                 .equ	EEPROMEND	= 0x03ff
                                 .equ	EEADRBITS	= 10
                                 #pragma AVRPART MEMORY PROG_FLASH 32768
                                 #pragma AVRPART MEMORY EEPROM 1024
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 2048
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x3800
                                 .equ	NRWW_STOP_ADDR	= 0x3fff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x37ff
                                 .equ	PAGESIZE	= 64
                                 .equ	FIRSTBOOTSTART	= 0x3f00
                                 .equ	SECONDBOOTSTART	= 0x3e00
                                 .equ	THIRDBOOTSTART	= 0x3c00
                                 .equ	FOURTHBOOTSTART	= 0x3800
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	PCI0addr	= 0x0006	; Pin Change Interrupt Request 0
                                 .equ	PCI1addr	= 0x0008	; Pin Change Interrupt Request 0
                                 .equ	PCI2addr	= 0x000a	; Pin Change Interrupt Request 1
                                 .equ	WDTaddr	= 0x000c	; Watchdog Time-out Interrupt
                                 .equ	OC2Aaddr	= 0x000e	; Timer/Counter2 Compare Match A
                                 .equ	OC2Baddr	= 0x0010	; Timer/Counter2 Compare Match A
                                 .equ	OVF2addr	= 0x0012	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0014	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0016	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0018	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x001a	; Timer/Counter1 Overflow
                                 .equ	OC0Aaddr	= 0x001c	; TimerCounter0 Compare Match A
                                 .equ	OC0Baddr	= 0x001e	; TimerCounter0 Compare Match B
                                 .equ	OVF0addr	= 0x0020	; Timer/Couner0 Overflow
                                 .equ	SPIaddr	= 0x0022	; SPI Serial Transfer Complete
                                 .equ	URXCaddr	= 0x0024	; USART Rx Complete
                                 .equ	UDREaddr	= 0x0026	; USART, Data Register Empty
                                 .equ	UTXCaddr	= 0x0028	; USART Tx Complete
                                 .equ	ADCCaddr	= 0x002a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x002c	; EEPROM Ready
                                 .equ	ACIaddr	= 0x002e	; Analog Comparator
                                 .equ	TWIaddr	= 0x0030	; Two-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0032	; Store Program Memory Read
                                 
                                 .equ	INT_VECTORS_SIZE	= 52	; size in words
                                 
                                 #endif  /* _M328PDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ; Lab4.asm
                                 ;
                                 ; Created: 3/27/2021 11:31:09 PM
                                 ; Author : Hongy Zeng, Louis M Solovy
                                 ;
                                 
                                 .include "m328Pdef.inc"
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega328P.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m328Pdef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega328P
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega328P
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M328PDEF_INC_
                                 #endif  /* _M328PDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 ;***** Subroutine Register Variables
                                 .def	drem16uL=r14
                                 .def	drem16uH=r15
                                 .def	dd16uL	=r16
                                 .def	dd16uH	=r17
                                 .def	dv16uL	=r18
                                 .def	dv16uH	=r19
                                 
                                 .cseg
                                 .org 0x0000
000000 c03f                      	rjmp start
                                 
                                 .org 0x0006 ; button 
000006 c21e                      	rjmp button
                                 
                                 .org 0x0008 ; A
000008 c233                      	rjmp rpg
                                 .org 0x000A ; B
00000a c231                      	rjmp rpg
                                 .org 0x0034
                                 ;LCDstr:.db 0x33,0x32,0x28,0x01,0x0c,0x06
                                 ;ldi r26, low(LCDstr) 
                                 ;ldi r27, high(LCDstr)
000034 4344
000035 3d20
000036 0020                      msg1: .db "DC = ", 0x00
000037 2528
000038 0029                      msg2: .db "(%)", 0x00
000039 454c
00003a 7344
00003b 003a                      msg3: .db "LEDs:", 0x00
00003c 4e4f
00003d 0020                      msg4: .db "ON ",0x00 
00003e 464f
00003f 0046                      msg5: .db "OFF", 0x00
                                 ; PB5 -> RS
                                 ; PB3 -> ENABLE
                                 ; PB0 -> BUTTON PCINT0
                                 ; PD7 -> CHANNEL B PCINT23
                                 ; PC5 -> CHANNEL A PCINT13
                                 ; PC0 -> D4
                                 ; PC1 -> D5
                                 ; PC2 -> D6
                                 ; PC3 -> D7
                                 ; PD3 -> PWM OC2B
                                 
                                 start:
                                 ; set up I/O
000040 e208                      ldi r16, (1<<DDB5) | (1<<DDB3)
000041 b904                      out DDRB, r16
000042 e00f                      ldi r16, (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0) 
000043 b907                      out DDRC, r16
000044 e008                      ldi r16, (1<<DDD3)
000045 b90a                      out DDRD, r16
000046 e001                      ldi r16, 0x01
000047 b905                      out PORTB, r16 ; PORTB0-2 set to high
000048 e200                      ldi r16, 0b00100000
000049 b908                      out PORTC, r16
00004a e800                      ldi r16, 0b10000000
00004b b90b                      out PORTD, r16
                                 ; setup interrupt
00004c e007                      ldi r16, 0b00000111
00004d 9300 0068                 sts PCICR, r16
00004f e001                      ldi r16, 0x01
000050 9300 006b                 sts PCMSK0, r16
000052 e200                      ldi r16, 0b00100000
000053 9300 006c                 sts PCMSK1, r16
000055 e800                      ldi r16, 0b10000000
000056 9300 006d                 sts PCMSK2, r16
                                 
                                 
                                 
                                 
                                 ;set up TC2 and OCR2B
000058 e203                      ldi r16, 0b00100011 ; set to noninvert OC2B, fast PWM with threshold as OCR2B
000059 9300 00b0                 sts TCCR2A, r16
00005b e002                      ldi r16, 0b00000010 ; /8 
00005c 9300 00b1                 sts TCCR2B, r16 ; cannot use out as out of range
00005e e70f                      ldi r16, 127 ; when OCR2B match , controls DC
00005f 9300 00b4                 sts OCR2B, r16
                                 
000061 d01a                      rcall initialization
                                 .set dcval = 500 ; controls the digits for DC display
000062 efc4                      ldi r28, low(dcval)
000063 e0d1                      ldi r29, high(dcval)
000064 e830                      ldi r19, 0b10000000 ; bit 7 for if LED should be on, 6 is button pressed , 3 for ccw, 2 for cw, 1 for reaching upper limit
                                 main:
000065 9478                      	sei 
000066 d001                      	rcall display
                                 refresh:
000067 cfff                      	rjmp refresh
                                 
                                 display:
                                 	; display 1st line
000068 e6e8                      	ldi r30,LOW(2*msg1) ; Load Z register low
000069 e0f0                      	ldi r31,HIGH(2*msg1) ; Load Z register high
00006a d06a                      	rcall displayCString
                                 	
                                 	;display DC
00006b d099                      	rcall displayDC
                                 
                                 	; display %
00006c e6ee                      	ldi r30, low(2*msg2)
00006d e0f0                      	ldi r31, high(2*msg2)
00006e d066                      	rcall displayCString
                                 
                                 	; move cursor to second line
00006f e04c                      	ldi r20, 0x0C
000070 b948                      	out PORTC, r20
000071 d081                      	rcall LCDStrobe
000072 d0c8                      	rcall delay_100us
000073 e040                      	ldi r20, 0x00
000074 b948                      	out PORTC, r20
000075 d07d                      	rcall LCDStrobe
000076 d0c4                      	rcall delay_100us	
                                 
000077 e7e2                      	ldi r30,LOW(2*msg3) ; Load Z register low
000078 e0f0                      	ldi r31,HIGH(2*msg3) ; Load Z register high
000079 d05b                      	rcall displayCString
                                 
00007a d07f                      	rcall displayONF
00007b 9508                      	ret
                                 
                                 initialization: ; Z overwritten
00007c 934f                      	push r20
                                 ; 8 bit mode
00007d 982d                      	cbi PORTB, 5 ; RS = 0 , commands 
                                 	.set count = 1000
00007e eee8                      	ldi r30, low(count)
00007f e0f3                      	ldi r31, high(count)
000080 d0b6                      	rcall delay ; delay 100ms
                                 
000081 e043                      	ldi r20, 0x03
000082 b948                      	out PORTC, r20
000083 d06f                      	rcall LCDStrobe
                                 	.set count = 50
000084 e3e2                      	ldi r30, low(count)
000085 e0f0                      	ldi r31, high(count)
000086 d0b0                      	rcall delay ; 5ms
                                 
000087 e043                      	ldi r20, 0x03
000088 b948                      	out PORTC, r20
000089 d069                      	rcall LCDStrobe
00008a d0b0                      	rcall delay_100us
00008b d0af                      	rcall delay_100us ; 200us
                                 
00008c e043                      	ldi r20, 0x03
00008d b948                      	out PORTC, r20
00008e d064                      	rcall LCDStrobe
00008f d0ab                      	rcall delay_100us
000090 d0aa                      	rcall delay_100us ; 200us
                                 
000091 e042                      	ldi r20, 0x02
000092 b948                      	out PORTC, r20
000093 d05f                      	rcall LCDStrobe
                                 	.set count = 50
000094 e3e2                      	ldi r30, low(count)
000095 e0f0                      	ldi r31, high(count)
000096 d0a0                      	rcall delay ; 5ms 
                                 
                                 ; 4bit mode
000097 e042                      	ldi r20, 0x02
000098 b948                      	out PORTC, r20
000099 d059                      	rcall LCDStrobe
                                 	.set count = 17
00009a e1e1                      	ldi r30, low(count)
00009b e0f0                      	ldi r31, high(count)
00009c d09a                      	rcall delay ; 1.7ms
00009d e048                      	ldi r20, 0x08
00009e b948                      	out PORTC, r20
00009f d053                      	rcall LCDStrobe
                                 	.set count = 17
0000a0 e1e1                      	ldi r30, low(count)
0000a1 e0f0                      	ldi r31, high(count)
0000a2 d094                      	rcall delay 
                                 
0000a3 e040                      	ldi r20, 0x00
0000a4 b948                      	out PORTC, r20
0000a5 d04d                      	rcall LCDStrobe
                                 	.set count = 17
0000a6 e1e1                      	ldi r30, low(count)
0000a7 e0f0                      	ldi r31, high(count)
0000a8 d08e                      	rcall delay
0000a9 e048                      	ldi r20, 0x08
0000aa b948                      	out PORTC, r20
0000ab d047                      	rcall LCDStrobe
                                 	.set count = 17
0000ac e1e1                      	ldi r30, low(count)
0000ad e0f0                      	ldi r31, high(count)
0000ae d088                      	rcall delay
                                 
0000af e040                      	ldi r20, 0x00
0000b0 b948                      	out PORTC, r20
0000b1 d041                      	rcall LCDStrobe
                                 	.set count = 17
0000b2 e1e1                      	ldi r30, low(count)
0000b3 e0f0                      	ldi r31, high(count)
0000b4 d082                      	rcall delay
0000b5 e041                      	ldi r20, 0x01
0000b6 b948                      	out PORTC, r20
0000b7 d03b                      	rcall LCDStrobe
                                 	.set count = 17
0000b8 e1e1                      	ldi r30, low(count)
0000b9 e0f0                      	ldi r31, high(count)
0000ba d07c                      	rcall delay
                                 
0000bb e040                      	ldi r20, 0x00
0000bc b948                      	out PORTC, r20
0000bd d035                      	rcall LCDStrobe
                                 	.set count = 17
0000be e1e1                      	ldi r30, low(count)
0000bf e0f0                      	ldi r31, high(count)
0000c0 d076                      	rcall delay
0000c1 e046                      	ldi r20, 0x06
0000c2 b948                      	out PORTC, r20
0000c3 d02f                      	rcall LCDStrobe
                                 	.set count = 17
0000c4 e1e1                      	ldi r30, low(count)
0000c5 e0f0                      	ldi r31, high(count)
0000c6 d070                      	rcall delay
                                 
0000c7 e040                      	ldi r20, 0x00
0000c8 b948                      	out PORTC, r20
0000c9 d029                      	rcall LCDStrobe
                                 	.set count = 17
0000ca e1e1                      	ldi r30, low(count)
0000cb e0f0                      	ldi r31, high(count)
0000cc d06a                      	rcall delay
0000cd e04c                      	ldi r20, 0x0C
0000ce b948                      	out PORTC, r20
0000cf d023                      	rcall LCDStrobe
                                 	.set count = 17
0000d0 e1e1                      	ldi r30, low(count)
0000d1 e0f0                      	ldi r31, high(count)
0000d2 d064                      	rcall delay
                                 
0000d3 914f                      	pop r20
0000d4 9508                      	ret
                                 
                                 
                                 displayCString: ; modify r0
0000d5 9a2d                      	sbi PORTB, 5
0000d6 9005                      	lpm r0, Z+ ; r0 <-- first byte
0000d7 2000                      	tst r0 ; Reached end of message ?
0000d8 f049                      	breq done ; Yes => quit
0000d9 9402                      	swap r0 ; Upper nibble in place
0000da b808                      	out PORTC,r0 ; Send upper nibble out
0000db d017                      	rcall LCDStrobe ; Latch nibble '
0000dc d05e                      	rcall delay_100us
0000dd 9402                      	swap r0 ; Lower nibble in place
0000de b808                      	out PORTC,r0 ; Send lower nibble out
0000df d013                      	rcall LCDStrobe ; Latch nibble
0000e0 d05a                      	rcall delay_100us
0000e1 cff3                      	rjmp displayCstring
                                 done:
0000e2 982d                      	cbi PORTB, 5
0000e3 9508                      	ret
                                 
                                 displayDstring: ; modify r0  
0000e4 9a2d                      	sbi PORTB, 5   
0000e5 9001                      	ld r0,Z+
0000e6 2000                      	tst r0 ; Reached end of message ?
0000e7 f049                      	breq done_dsd ; Yes => quit
0000e8 9402                      	swap r0 ; Upper nibble in place
0000e9 b808                      	out PORTC,r0 ; Send upper nibble out
0000ea d008                      	rcall LCDStrobe ; Latch nibble 
0000eb d04f                      	rcall delay_100us
0000ec 9402                      	swap r0 ; Lower nibble in place
0000ed b808                      	out PORTC,r0 ; Send lower nibble out
0000ee d004                      	rcall LCDStrobe ; Latch nibble
0000ef d04b                      	rcall delay_100us
0000f0 cff3                      	rjmp displayDString
                                 done_dsd:
0000f1 982d                      	cbi PORTB, 5
0000f2 9508                      	ret
                                 
                                 LCDStrobe:
0000f3 9a2b                      	sbi PORTB, 3
0000f4 0000                      	nop
0000f5 0000                      	nop
0000f6 0000                      	nop
0000f7 0000                      	nop
0000f8 982b                      	cbi PORTB, 3
0000f9 9508                      	ret
                                 displayONF:
0000fa fd37                      	sbrc r19, 7
0000fb c001                      	rjmp displayON
0000fc c004                      	rjmp displayOFF
                                 
                                 displayON:
0000fd e7e8                      	ldi r30,LOW(2*msg4) ; Load Z register low
0000fe e0f0                      	ldi r31,HIGH(2*msg4) ; Load Z register high
0000ff dfd5                      	rcall displayCString
000100 9508                      	ret
                                 
                                 displayOFF:
000101 e7ec                      	ldi r30,LOW(2*msg5) ; Load Z register low
000102 e0f0                      	ldi r31,HIGH(2*msg5) ; Load Z register high
000103 dfd1                      	rcall displayCString
000104 9508                      	ret
                                 displayDC:
                                 .dseg
000100                           	dtxt: .BYTE 6 ; Allocation
                                 
                                 .cseg
000105 92ef                      	push r14
000106 92ff                      	push r15
000107 930f                      	push r16 
000108 931f                      	push r17
000109 932f                      	push r18
00010a 933f                      	push r19
00010b 93ef                      	push r30
00010c 93ff                      	push r31
00010d 2f0c                      	mov dd16uL,r28 ; LSB of number to display
00010e 2f1d                      	mov dd16uH,r29 ; MSB of number to display 
                                 
00010f e02a                      	ldi dv16uL,low(10)
000110 e030                      	ldi dv16uH,high(10)
                                 ; Store terminating for the string.
000111 e040                      	ldi r20,0x00 ; Terminating NULL 
000112 9340 0105                 	sts dtxt+5,r20 ; Store in RAM     
                                 ; Divide the number by 10 and format remainder.
000114 d037                      	rcall div16u ; Result: r17:r16, rem: r15:r14
000115 e340                      	ldi r20,0x30
000116 0ee4                      	add r14,r20 ; Convert to ASCII
000117 92e0 0104                 	sts dtxt+4,r14 ; Store in RAM
                                 ; Generate decimal point.
000119 e24e                      	ldi r20,0x2E ; ASCII code for .
00011a 9340 0103                 	sts dtxt+3,r20 ; Store in RAM 
                                 ; Generate unit
00011c d02f                      	rcall div16u
00011d e340                      	ldi r20,0x30
00011e 0ee4                      	add r14, r20
00011f 92e0 0102                 	sts dtxt+2, r14
                                 ; Generate tens
000121 d02a                      	rcall div16u
000122 e340                      	ldi r20,0x30
000123 0ee4                      	add r14, r20
000124 92e0 0101                 	sts dtxt+1, r14
                                 
                                 ; genearte hundreds
000126 d025                      	rcall div16u
000127 e340                      	ldi r20,0x30
000128 0ee4                      	add r14, r20
000129 92e0 0100                 	sts dtxt, r14
                                 
00012b e0e0                      	ldi r30, low(dtxt)
00012c e0f1                      	ldi r31, high(dtxt)
00012d dfb6                      	rcall displayDstring
                                 
00012e 91ff                      	pop r31
00012f 91ef                      	pop r30
000130 913f                      	pop r19
000131 912f                      	pop r18
000132 911f                      	pop r17
000133 910f                      	pop r16
000134 90ff                      	pop r15
000135 90ef                      	pop r14
000136 9508                      	ret
                                 
                                 delay: ; based on Z (r31 r30) value, delay for Z times 100us. 50000 for 5s, 12000 for 12 s
000137 d003                      	rcall delay_100us
000138 9731                      	sbiw Z, 1 ;R30, R31 16 bit loop
000139 f7e9                      	brne delay
00013a 9508                      	ret
                                 delay_100us: ; store Z to stack and reuse them
00013b 93ef                      	push r30	
00013c 93ff                      	push r31
                                 	;stop timer
00013d e0f0                      	ldi r31, 0x00 ; stop timer
00013e bdf5                      	out TCCR0B, r31 ; 
                                 	; clear overflow flag
00013f b3f5                      	in r31, TIFR0 
000140 60f1                      	sbr r31, 1<<TOV0 ; clear TOV0, write logic 1
                                 	; set count
000141 bbf5                      	out TIFR0, r31
000142 e3f8                      	ldi r31, 56
                                 	;start timer with new initial count
000143 bdf6                      	out TCNT0, r31 ; load counter
000144 e0e2                      	ldi r30, 2
000145 bde5                      	out TCCR0B, r30 ; restart timer/8
                                 wait:
000146 b3f5                      	in r31, TIFR0 ; 
000147 fff0                      	sbrs r31, TOV0 ; check overflow, if overflow then skip  
000148 cffd                      	rjmp wait 
000149 91ff                      	pop r31
00014a 91ef                      	pop r30
00014b 9508                      	ret
                                 
                                 
                                 ;***************************************************************************
                                 ;*
                                 ;* "div16u" - 16/16 Bit Unsigned Division
                                 ;*
                                 ;* This subroutine divides the two 16-bit numbers 
                                 ;* "dd8uH:dd8uL" (dividend) and "dv16uH:dv16uL" (divisor). 
                                 ;* The result is placed in "dres16uH:dres16uL" and the remainder in
                                 ;* "drem16uH:drem16uL".
                                 ;*  
                                 ;* Number of words	:196 + return
                                 ;* Number of cycles	:148/173/196 (Min/Avg/Max)
                                 ;* Low registers used	:2 (drem16uL,drem16uH)
                                 ;* High registers used  :4 (dres16uL/dd16uL,dres16uH/dd16uH,dv16uL,dv16uH)
                                 ;*
                                 ;***************************************************************************
                                 
                                 
                                 ;***** Code
                                 
                                 div16u:	
00014c 24ee                      	clr	drem16uL	;clear remainder Low byte
00014d 18ff                      	sub	drem16uH,drem16uH;clear remainder High byte and carry
                                 
00014e 1f00                      	rol	dd16uL		;shift left dividend
00014f 1f11                      	rol	dd16uH
000150 1cee                      	rol	drem16uL	;shift dividend into remainder
000151 1cff                      	rol	drem16uH
000152 1ae2                      	sub	drem16uL,dv16uL	;remainder = remainder - divisor
000153 0af3                      	sbc	drem16uH,dv16uH	;
000154 f420                      	brcc	d16u_1		;if result negative
000155 0ee2                      	add	drem16uL,dv16uL	;    restore remainder
000156 1ef3                      	adc	drem16uH,dv16uH
000157 9488                      	clc			;    clear carry to be shifted into result
000158 c001                      	rjmp	d16u_2		;else
000159 9408                      d16u_1:	sec			;    set carry to be shifted into result
                                 
00015a 1f00                      d16u_2:	rol	dd16uL		;shift left dividend
00015b 1f11                      	rol	dd16uH
00015c 1cee                      	rol	drem16uL	;shift dividend into remainder
00015d 1cff                      	rol	drem16uH
00015e 1ae2                      	sub	drem16uL,dv16uL	;remainder = remainder - divisor
00015f 0af3                      	sbc	drem16uH,dv16uH	;
000160 f420                      	brcc	d16u_3		;if result negative
000161 0ee2                      	add	drem16uL,dv16uL	;    restore remainder
000162 1ef3                      	adc	drem16uH,dv16uH
000163 9488                      	clc			;    clear carry to be shifted into result
000164 c001                      	rjmp	d16u_4		;else
000165 9408                      d16u_3:	sec			;    set carry to be shifted into result
                                 
000166 1f00                      d16u_4:	rol	dd16uL		;shift left dividend
000167 1f11                      	rol	dd16uH
000168 1cee                      	rol	drem16uL	;shift dividend into remainder
000169 1cff                      	rol	drem16uH
00016a 1ae2                      	sub	drem16uL,dv16uL	;remainder = remainder - divisor
00016b 0af3                      	sbc	drem16uH,dv16uH	;
00016c f420                      	brcc	d16u_5		;if result negative
00016d 0ee2                      	add	drem16uL,dv16uL	;    restore remainder
00016e 1ef3                      	adc	drem16uH,dv16uH
00016f 9488                      	clc			;    clear carry to be shifted into result
000170 c001                      	rjmp	d16u_6		;else
000171 9408                      d16u_5:	sec			;    set carry to be shifted into result
                                 
000172 1f00                      d16u_6:	rol	dd16uL		;shift left dividend
000173 1f11                      	rol	dd16uH
000174 1cee                      	rol	drem16uL	;shift dividend into remainder
000175 1cff                      	rol	drem16uH
000176 1ae2                      	sub	drem16uL,dv16uL	;remainder = remainder - divisor
000177 0af3                      	sbc	drem16uH,dv16uH	;
000178 f420                      	brcc	d16u_7		;if result negative
000179 0ee2                      	add	drem16uL,dv16uL	;    restore remainder
00017a 1ef3                      	adc	drem16uH,dv16uH
00017b 9488                      	clc			;    clear carry to be shifted into result
00017c c001                      	rjmp	d16u_8		;else
00017d 9408                      d16u_7:	sec			;    set carry to be shifted into result
                                 
00017e 1f00                      d16u_8:	rol	dd16uL		;shift left dividend
00017f 1f11                      	rol	dd16uH
000180 1cee                      	rol	drem16uL	;shift dividend into remainder
000181 1cff                      	rol	drem16uH
000182 1ae2                      	sub	drem16uL,dv16uL	;remainder = remainder - divisor
000183 0af3                      	sbc	drem16uH,dv16uH	;
000184 f420                      	brcc	d16u_9		;if result negative
000185 0ee2                      	add	drem16uL,dv16uL	;    restore remainder
000186 1ef3                      	adc	drem16uH,dv16uH
000187 9488                      	clc			;    clear carry to be shifted into result
000188 c001                      	rjmp	d16u_10		;else
000189 9408                      d16u_9:	sec			;    set carry to be shifted into result
                                 
00018a 1f00                      d16u_10:rol	dd16uL		;shift left dividend
00018b 1f11                      	rol	dd16uH
00018c 1cee                      	rol	drem16uL	;shift dividend into remainder
00018d 1cff                      	rol	drem16uH
00018e 1ae2                      	sub	drem16uL,dv16uL	;remainder = remainder - divisor
00018f 0af3                      	sbc	drem16uH,dv16uH	;
000190 f420                      	brcc	d16u_11		;if result negative
000191 0ee2                      	add	drem16uL,dv16uL	;    restore remainder
000192 1ef3                      	adc	drem16uH,dv16uH
000193 9488                      	clc			;    clear carry to be shifted into result
000194 c001                      	rjmp	d16u_12		;else
000195 9408                      d16u_11:sec			;    set carry to be shifted into result
                                 
000196 1f00                      d16u_12:rol	dd16uL		;shift left dividend
000197 1f11                      	rol	dd16uH
000198 1cee                      	rol	drem16uL	;shift dividend into remainder
000199 1cff                      	rol	drem16uH
00019a 1ae2                      	sub	drem16uL,dv16uL	;remainder = remainder - divisor
00019b 0af3                      	sbc	drem16uH,dv16uH	;
00019c f420                      	brcc	d16u_13		;if result negative
00019d 0ee2                      	add	drem16uL,dv16uL	;    restore remainder
00019e 1ef3                      	adc	drem16uH,dv16uH
00019f 9488                      	clc			;    clear carry to be shifted into result
0001a0 c001                      	rjmp	d16u_14		;else
0001a1 9408                      d16u_13:sec			;    set carry to be shifted into result
                                 
0001a2 1f00                      d16u_14:rol	dd16uL		;shift left dividend
0001a3 1f11                      	rol	dd16uH
0001a4 1cee                      	rol	drem16uL	;shift dividend into remainder
0001a5 1cff                      	rol	drem16uH
0001a6 1ae2                      	sub	drem16uL,dv16uL	;remainder = remainder - divisor
0001a7 0af3                      	sbc	drem16uH,dv16uH	;
0001a8 f420                      	brcc	d16u_15		;if result negative
0001a9 0ee2                      	add	drem16uL,dv16uL	;    restore remainder
0001aa 1ef3                      	adc	drem16uH,dv16uH
0001ab 9488                      	clc			;    clear carry to be shifted into result
0001ac c001                      	rjmp	d16u_16		;else
0001ad 9408                      d16u_15:sec			;    set carry to be shifted into result
                                 
0001ae 1f00                      d16u_16:rol	dd16uL		;shift left dividend
0001af 1f11                      	rol	dd16uH
0001b0 1cee                      	rol	drem16uL	;shift dividend into remainder
0001b1 1cff                      	rol	drem16uH
0001b2 1ae2                      	sub	drem16uL,dv16uL	;remainder = remainder - divisor
0001b3 0af3                      	sbc	drem16uH,dv16uH	;
0001b4 f420                      	brcc	d16u_17		;if result negative
0001b5 0ee2                      	add	drem16uL,dv16uL	;    restore remainder
0001b6 1ef3                      	adc	drem16uH,dv16uH
0001b7 9488                      	clc			;    clear carry to be shifted into result
0001b8 c001                      	rjmp	d16u_18		;else
0001b9 9408                      d16u_17:	sec			;    set carry to be shifted into result
                                 
0001ba 1f00                      d16u_18:rol	dd16uL		;shift left dividend
0001bb 1f11                      	rol	dd16uH
0001bc 1cee                      	rol	drem16uL	;shift dividend into remainder
0001bd 1cff                      	rol	drem16uH
0001be 1ae2                      	sub	drem16uL,dv16uL	;remainder = remainder - divisor
0001bf 0af3                      	sbc	drem16uH,dv16uH	;
0001c0 f420                      	brcc	d16u_19		;if result negative
0001c1 0ee2                      	add	drem16uL,dv16uL	;    restore remainder
0001c2 1ef3                      	adc	drem16uH,dv16uH
0001c3 9488                      	clc			;    clear carry to be shifted into result
0001c4 c001                      	rjmp	d16u_20		;else
0001c5 9408                      d16u_19:sec			;    set carry to be shifted into result
                                 
0001c6 1f00                      d16u_20:rol	dd16uL		;shift left dividend
0001c7 1f11                      	rol	dd16uH
0001c8 1cee                      	rol	drem16uL	;shift dividend into remainder
0001c9 1cff                      	rol	drem16uH
0001ca 1ae2                      	sub	drem16uL,dv16uL	;remainder = remainder - divisor
0001cb 0af3                      	sbc	drem16uH,dv16uH	;
0001cc f420                      	brcc	d16u_21		;if result negative
0001cd 0ee2                      	add	drem16uL,dv16uL	;    restore remainder
0001ce 1ef3                      	adc	drem16uH,dv16uH
0001cf 9488                      	clc			;    clear carry to be shifted into result
0001d0 c001                      	rjmp	d16u_22		;else
0001d1 9408                      d16u_21:sec			;    set carry to be shifted into result
                                 
0001d2 1f00                      d16u_22:rol	dd16uL		;shift left dividend
0001d3 1f11                      	rol	dd16uH
0001d4 1cee                      	rol	drem16uL	;shift dividend into remainder
0001d5 1cff                      	rol	drem16uH
0001d6 1ae2                      	sub	drem16uL,dv16uL	;remainder = remainder - divisor
0001d7 0af3                      	sbc	drem16uH,dv16uH	;
0001d8 f420                      	brcc	d16u_23		;if result negative
0001d9 0ee2                      	add	drem16uL,dv16uL	;    restore remainder
0001da 1ef3                      	adc	drem16uH,dv16uH
0001db 9488                      	clc			;    clear carry to be shifted into result
0001dc c001                      	rjmp	d16u_24		;else
0001dd 9408                      d16u_23:sec			;    set carry to be shifted into result
                                 
0001de 1f00                      d16u_24:rol	dd16uL		;shift left dividend
0001df 1f11                      	rol	dd16uH
0001e0 1cee                      	rol	drem16uL	;shift dividend into remainder
0001e1 1cff                      	rol	drem16uH
0001e2 1ae2                      	sub	drem16uL,dv16uL	;remainder = remainder - divisor
0001e3 0af3                      	sbc	drem16uH,dv16uH	;
0001e4 f420                      	brcc	d16u_25		;if result negative
0001e5 0ee2                      	add	drem16uL,dv16uL	;    restore remainder
0001e6 1ef3                      	adc	drem16uH,dv16uH
0001e7 9488                      	clc			;    clear carry to be shifted into result
0001e8 c001                      	rjmp	d16u_26		;else
0001e9 9408                      d16u_25:sec			;    set carry to be shifted into result
                                 
0001ea 1f00                      d16u_26:rol	dd16uL		;shift left dividend
0001eb 1f11                      	rol	dd16uH
0001ec 1cee                      	rol	drem16uL	;shift dividend into remainder
0001ed 1cff                      	rol	drem16uH
0001ee 1ae2                      	sub	drem16uL,dv16uL	;remainder = remainder - divisor
0001ef 0af3                      	sbc	drem16uH,dv16uH	;
0001f0 f420                      	brcc	d16u_27		;if result negative
0001f1 0ee2                      	add	drem16uL,dv16uL	;    restore remainder
0001f2 1ef3                      	adc	drem16uH,dv16uH
0001f3 9488                      	clc			;    clear carry to be shifted into result
0001f4 c001                      	rjmp	d16u_28		;else
0001f5 9408                      d16u_27:sec			;    set carry to be shifted into result
                                 
0001f6 1f00                      d16u_28:rol	dd16uL		;shift left dividend
0001f7 1f11                      	rol	dd16uH
0001f8 1cee                      	rol	drem16uL	;shift dividend into remainder
0001f9 1cff                      	rol	drem16uH
0001fa 1ae2                      	sub	drem16uL,dv16uL	;remainder = remainder - divisor
0001fb 0af3                      	sbc	drem16uH,dv16uH	;
0001fc f420                      	brcc	d16u_29		;if result negative
0001fd 0ee2                      	add	drem16uL,dv16uL	;    restore remainder
0001fe 1ef3                      	adc	drem16uH,dv16uH
0001ff 9488                      	clc			;    clear carry to be shifted into result
000200 c001                      	rjmp	d16u_30		;else
000201 9408                      d16u_29:sec			;    set carry to be shifted into result
                                 
000202 1f00                      d16u_30:rol	dd16uL		;shift left dividend
000203 1f11                      	rol	dd16uH
000204 1cee                      	rol	drem16uL	;shift dividend into remainder
000205 1cff                      	rol	drem16uH
000206 1ae2                      	sub	drem16uL,dv16uL	;remainder = remainder - divisor
000207 0af3                      	sbc	drem16uH,dv16uH	;
000208 f420                      	brcc	d16u_31		;if result negative
000209 0ee2                      	add	drem16uL,dv16uL	;    restore remainder
00020a 1ef3                      	adc	drem16uH,dv16uH
00020b 9488                      	clc			;    clear carry to be shifted into result
00020c c001                      	rjmp	d16u_32		;else
00020d 9408                      d16u_31:sec			;    set carry to be shifted into result
                                 
00020e 1f00                      d16u_32:rol	dd16uL		;shift left dividend
00020f 1f11                      	rol	dd16uH
000210 9508                      	ret
                                 
                                 buttonDeb: ; if pressed, set r19 bit 6 to 1, else 0
000211 936f                      	push r22
000212 937f                      	push r23
000213 93af                      	push r26
000214 e079                      	ldi r23, 9 ; reset sample counter
000215 e0a0                      	ldi r26, 0 ; 
                                 bDeb_loop:
000216 b163                      	in r22, PINB
000217 ff60                      	sbrs r22, 0
000218 95a3                      	inc r26 ; number of times button is pressed
000219 df21                      	rcall delay_100us
00021a 957a                      	dec r23
00021b f7d1                      	brne bDeb_loop
00021c 50a4                      	subi r26, 4
00021d f412                      	brpl setbuttonP
00021e 7b3f                      	andi r19, 0b10111111 ; set to not pressed if less than 5
00021f c001                      	rjmp bDeb_done
                                 setbuttonP:
000220 6430                      	ori r19, 0b01000000 ; set to pressed if more than 5
                                 bDeb_done:
000221 91af                      	pop r26
000222 917f                      	pop r23
000223 916f                      	pop r22
000224 9508                      	ret
                                 
                                 button:
000225 dfeb                      	rcall buttonDeb
000226 ff36                      	sbrs r19, 6
000227 9518                      	reti
                                 button_pressed:
000228 dfe8                      	rcall buttonDeb ; 0.9 ms + someother loop so 1ms
000229 fd36                      	sbrc r19, 6
00022a cffd                      	rjmp button_pressed
00022b 7b3f                      	andi r19, 0b10111111 ; button no longer pressed
00022c ff37                      	sbrs r19, 7 ; don't skip if was light off
00022d c007                      	rjmp lighton 
                                 lightoff:
00022e e040                      	ldi r20, 0b00000000 ; disconnect OC2B
00022f 9340 00b0                 	sts TCCR2A, r20
000231 773f                      	andi r19, 0b01111111
000232 d075                      	rcall clearDisplay
000233 de34                      	rcall display
000234 9518                      	reti
                                 lighton:
000235 e243                      	ldi r20, 0b00100011 ; set to noninvert OC2B
000236 9340 00b0                 	sts TCCR2A, r20
000238 6830                      	ori r19, 0b10000000
000239 d06e                      	rcall clearDisplay
00023a de2d                      	rcall display
00023b 9518                      	reti
                                 
                                 
                                 rpg:
00023c 939f                      	push r25
00023d ff37                      	sbrs r19, 7
00023e c008                      	rjmp aftercycle
00023f 7f33                      	andi r19, 0b11110011; reset rotating direction
000240 d00a                      	rcall rpgdebounce
000241 ff96                      	sbrs r25, 6
000242 d026                      	rcall rotating
000243 fdd2                      	sbrc r29, 2
000244 c002                      	rjmp aftercycle
000245 ff97                      	sbrs r25, 7
000246 d022                      	rcall rotating
                                 aftercycle:
000247 d060                      	rcall clearDisplay
000248 de1f                      	rcall display
000249 919f                      	pop r25
00024a 9518                      	reti
                                 
                                 
                                 rpgdebounce:
00024b 936f                      	push r22
00024c 937f                      	push r23
00024d 93af                      	push r26
00024e 93bf                      	push r27
00024f e079                      	ldi r23, 9 ; reset sample counter
000250 e0a0                      	ldi r26, 0
000251 e0b0                      	ldi r27, 0
000252 ec90                      	ldi r25, 0b11000000 ; load initial value 
                                 rpgdebounce_loop:
000253 b166                      	in r22, PINC
000254 ff65                      	sbrs r22, 5
000255 95a3                      	inc r26 ; number of times A is active 0
000256 b169                      	in r22, PIND
000257 ff67                      	sbrs r22, 7
000258 95b3                      	inc r27 
000259 dee1                      	rcall delay_100us
00025a 957a                      	dec r23
00025b f7b9                      	brne rpgdebounce_loop
00025c 50a4                      	subi r26, 4    
00025d f40a                      	brpl A_on
00025e c001                      	rjmp B
                                 A_on:
00025f 7b9f                      	andi r25, 0b10111111
000260 50b4                      B:	subi r27, 4
000261 f40a                      	brpl B_on
000262 c001                      	rjmp rpgdebounce_done
                                 B_on:
000263 779f                      	andi r25, 0b01111111
                                 rpgdebounce_done:
000264 91bf                      	pop r27
000265 91af                      	pop r26
000266 917f                      	pop r23
000267 916f                      	pop r22
000268 9508                      	ret
                                 
                                 
                                 rotating:
                                 	;determine direction
000269 ff96                      	sbrs r25, 6
00026a 6034                      	ori  r19, 0b00000100 ; clockwise
00026b ff97                      	sbrs r25, 7 
00026c 6038                      	ori r19, 0b00001000 ; ccw 
                                 rotating_helper: ; loop till detent	
00026d dfdd                      	rcall rpgdebounce ; reads the value
00026e 3c90                      	cpi r25, 0b11000000 ; compare to detent
00026f f7e9                      	brne rotating_helper ; incpmlete cycle
000270 fd32                      	sbrc r19, 2 ;don't skip if cw
000271 d003                      	rcall maybeincrease
000272 fd33                      	sbrc r19, 3 ; if cww
000273 d019                      	rcall maybedecrease
000274 9508                      	ret
                                 
                                 
                                 maybeincrease:     ;       
000275 3f0f                      	cpi r16, 255
000276 f409                      	brne maybeincreaseH
000277 9508                      	ret
                                 maybeincreaseH:
000278 3f04                      	cpi r16, 244            
000279 f041                      	breq totop
00027a 300d                      	cpi r16, 13
00027b f061                      	breq incto23
00027c e04d                      	ldi r20, 13
00027d 0f04                      	add r16, r20
00027e 9300 00b4                 	sts OCR2B, r16
000280 d023                      	rcall incDC
000281 9508                      	ret
                                 totop:
000282 ef0f                      	ldi r16, 255
000283 9300 00b4                 	sts OCR2B, r16
000285 6032                      	ori r19, 0b00000010
000286 d01d                      	rcall incDC
000287 9508                      	ret
                                 incto23:
000288 e107                      	ldi r16, 23
000289 9300 00b4                 	sts OCR2B, r16
00028b d018                      	rcall incDC
00028c 9508                      	ret
                                 
                                 maybedecrease:
00028d 300d                      	cpi r16, 13
00028e f409                      	brne maybedecreaseH
00028f 9508                      	ret
                                 maybedecreaseH:
000290 3107                      	cpi r16, 23
000291 f039                      	breq tobottom
000292 3f0f                      	cpi r16, 255
000293 f051                      	breq decto244
000294 500d                      	subi r16, 13
000295 9300 00b4                 	sts OCR2B, r16
000297 d00e                      	rcall decDC
000298 9508                      	ret
                                 tobottom:
000299 e00d                      	ldi r16, 13
00029a 9300 00b4                 	sts OCR2B, r16
00029c d009                      	rcall decDC
00029d 9508                      	ret
                                 decto244:
00029e ef04                      	ldi r16, 244
00029f 7f3d                      	andi r19, 0b11111101
0002a0 9300 00b4                 	sts OCR2B, r16
0002a2 d003                      	rcall decDC
0002a3 9508                      	ret
                                 
                                 incDC:
0002a4 96e2                      	adiw Y, 50;
0002a5 9508                      	ret
                                 decDC:
0002a6 97e2                      	sbiw Y, 50;
0002a7 9508                      	ret
                                 
                                 
                                 clearDisplay:
0002a8 934f                      	push r20
0002a9 93ef                      	push r30
0002aa 93ff                      	push r31
0002ab e040                      	ldi r20, 0x00
0002ac b948                      	out PORTC, r20
0002ad de45                      	rcall LCDStrobe
                                 	.set count = 17
0002ae e1e1                      	ldi r30, low(count)
0002af e0f0                      	ldi r31, high(count)
0002b0 de86                      	rcall delay
0002b1 e041                      	ldi r20, 0x01
0002b2 b948                      	out PORTC, r20
0002b3 de3f                      	rcall LCDStrobe
                                 	.set count = 17
0002b4 e1e1                      	ldi r30, low(count)
0002b5 e0f0                      	ldi r31, high(count)
0002b6 de80                      	rcall delay
0002b7 91ff                      	pop r31
0002b8 91ef                      	pop r30
0002b9 914f                      	pop r20


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega328P" register use summary:
x  :   0 y  :   2 z  :   3 r0 :  12 r1 :   0 r2 :   0 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:  59 r15:  52 r16:  64 r17:  20 r18:  35 r19:  53 r20:  58 
r21:   0 r22:  10 r23:   8 r24:   0 r25:  10 r26:  10 r27:   5 r28:   2 
r29:   3 r30:  29 r31:  36 
Registers used: 19 out of 35 (54.3%)

"ATmega328P" instruction use summary:
.lds  :   0 .sts  :   0 adc   :  16 add   :  21 adiw  :   1 and   :   0 
andi  :   7 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :  16 brcs  :   0 break :   0 breq  :   6 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 brlt  :   0 brmi  :   0 
brne  :   6 brpl  :   3 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   0 cbi   :   4 cbr   :   0 
clc   :  16 clh   :   0 cli   :   0 cln   :   0 clr   :   1 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   0 cpc   :   0 
cpi   :   7 cpse  :   0 dec   :   2 eor   :   0 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :   5 inc   :   3 jmp   :   0 
ld    :   1 ldd   :   0 ldi   : 100 lds   :   0 lpm   :   1 lsl   :   0 
lsr   :   0 mov   :   2 movw  :   0 mul   :   0 muls  :   0 mulsu :   0 
neg   :   0 nop   :   4 or    :   0 ori   :   5 out   :  32 pop   :  22 
push  :  22 rcall :  84 ret   :  25 reti  :   4 rjmp  :  33 rol   :  66 
ror   :   0 sbc   :  16 sbci  :   0 sbi   :   3 sbic  :   0 sbis  :   0 
sbiw  :   2 sbr   :   1 sbrc  :   5 sbrs  :  11 sec   :  16 seh   :   0 
sei   :   1 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :   0 std   :   0 sts   :  21 
sub   :  17 subi  :   4 swap  :   4 tst   :   2 wdr   :   0 
Instructions used: 42 out of 113 (37.2%)

"ATmega328P" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000576   1278     24   1302   32768   4.0%
[.dseg] 0x000100 0x000106      0      6      6    2048   0.3%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 0 warnings
